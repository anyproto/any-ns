{
  "address": "0x644B71f85269D377ef5F1666ACE55315e20c037C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rentPrices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "RentPriceChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "baseCents",
              "type": "uint256"
            }
          ],
          "internalType": "struct IAnytypePriceOracle.Price",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price2Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price3Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price4Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price5Letter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xca0d67c0f27999605c25999c37eb834ed63f3e45940335338499ebc5707cfa75",
  "receipt": {
    "to": null,
    "from": "0x61d1eeE7FBF652482DEa98A1Df591C626bA09a60",
    "contractAddress": "0x644B71f85269D377ef5F1666ACE55315e20c037C",
    "transactionIndex": 8,
    "gasUsed": "431683",
    "logsBloom": "0x
    "blockHash": "0xb3e513249faa128043b46dac35b942f4a473ab1b62f589206793512ac71dace5",
    "transactionHash": "0xca0d67c0f27999605c25999c37eb834ed63f3e45940335338499ebc5707cfa75",
    "logs": [],
    "blockNumber": 3790732,
    "cumulativeGasUsed": "1161926",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      1000,
      1000,
      1000,
      1000,
      1000
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "4d97b1168a02bd4dec67caa9e9fa8aaa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rentPrices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"RentPriceChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"baseCents\",\"type\":\"uint256\"}],\"internalType\":\"struct IAnytypePriceOracle.Price\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price2Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price3Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price4Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price5Letter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple price oracle for Anytype domains.\",\"kind\":\"dev\",\"methods\":{\"price(string,uint256,uint256)\":{\"details\":\"Returns the price to register or renew a name.\",\"params\":{\"duration\":\"How long the name is being registered or extended for, in seconds.\",\"expires\":\"When the name presently expires (0 if this is a new registration).\",\"name\":\"The name being registered or renewed.\"},\"returns\":{\"_0\":\"base premium tuple of base price + premium price\"}}},\"title\":\"AnytypePriceOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/anytype/AnytypePriceOracle.sol\":\"AnytypePriceOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/anytype/AnytypePriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IAnytypePriceOracle.sol\\\";\\nimport \\\"../ethregistrar/StringUtils.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title AnytypePriceOracle\\n * @dev A simple price oracle for Anytype domains.\\n */\\ncontract AnytypePriceOracle is IAnytypePriceOracle {\\n    using StringUtils for *;\\n\\n    // Rent in base price units by length\\n    uint256 public immutable price1Letter;\\n    uint256 public immutable price2Letter;\\n    uint256 public immutable price3Letter;\\n    uint256 public immutable price4Letter;\\n    uint256 public immutable price5Letter;\\n\\n    event RentPriceChanged(uint256[] prices);\\n\\n    constructor(uint256[] memory _rentPrices) {\\n        // in cents per year\\n        price1Letter = _rentPrices[0];\\n        price2Letter = _rentPrices[1];\\n        price3Letter = _rentPrices[2];\\n        price4Letter = _rentPrices[3];\\n        price5Letter = _rentPrices[4];\\n    }\\n\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view override returns (IAnytypePriceOracle.Price memory) {\\n        uint256 len = name.strlen();\\n        uint256 yearCount = (duration / 365 days) + 1;\\n\\n        uint256 centsBasePerYear;\\n\\n        // TODO: use expires variable!\\n\\n        if (len >= 5) {\\n            centsBasePerYear = price5Letter;\\n        } else if (len == 4) {\\n            centsBasePerYear = price4Letter;\\n        } else if (len == 3) {\\n            centsBasePerYear = price3Letter;\\n        } else if (len == 2) {\\n            centsBasePerYear = price2Letter;\\n        } else {\\n            centsBasePerYear = price1Letter;\\n        }\\n\\n        return\\n            IAnytypePriceOracle.Price({\\n                baseCents: yearCount * centsBasePerYear\\n            });\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual returns (bool) {\\n        return\\n            interfaceID == type(IERC165).interfaceId ||\\n            interfaceID == type(IAnytypePriceOracle).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2a767d489a3b685406f70366f1c8abf4b67d2a84e998e669c4a8c9d713dd3f97\",\"license\":\"MIT\"},\"contracts/anytype/IAnytypePriceOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\n/**\\n * @title IAnytypePriceOracle\\n * @dev This will return price in USD cents!\\n * so then it can be then used to calculate price in \\\"stablecoin\\\" units\\n * (with different decimals number)\\n */\\ninterface IAnytypePriceOracle {\\n    struct Price {\\n        uint256 baseCents;\\n    }\\n\\n    /**\\n     * @dev Returns the price to register or renew a name.\\n     * @param name The name being registered or renewed.\\n     * @param expires When the name presently expires (0 if this is a new registration).\\n     * @param duration How long the name is being registered or extended for, in seconds.\\n     * @return base premium tuple of base price + premium price\\n     */\\n    function price(\\n        string calldata name,\\n        uint256 expires,\\n        uint256 duration\\n    ) external view returns (Price calldata);\\n}\\n\",\"keccak256\":\"0xd8b3c4854641ec31592e0bc3cfe0d2deff7a960e5f333dc18c26e383c7af3613\",\"license\":\"MIT\"},\"contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b506040516108f93803806108f9833981016040819052610030916100f7565b80600081518110610043576100436101b4565b60200260200101516080818152505080600181518110610065576100656101b4565b602002602001015160a0818152505080600281518110610087576100876101b4565b602002602001015160c08181525050806003815181106100a9576100a96101b4565b602002602001015160e08181525050806004815181106100cb576100cb6101b4565b60200260200101516101008181525050506101ca565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561010a57600080fd5b82516001600160401b038082111561012157600080fd5b818501915085601f83011261013557600080fd5b815181811115610147576101476100e1565b8060051b604051601f19603f8301168101818110858211171561016c5761016c6100e1565b60405291825284820192508381018501918883111561018a57600080fd5b938501935b828510156101a85784518452938501939285019261018f565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60805160a05160c05160e051610100516106c96102306000396000818161010601526102b201526000818161017b01526102e101526000818161012d0152610310015260008181610154015261033f01526000818160af015261036601526106c96000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806359b6b86c1161005b57806359b6b86c14610101578063a200e15314610128578063cd5d2c741461014f578063d820ed421461017657600080fd5b806301ffc9a7146100825780632c0fd74c146100aa57806350e9a715146100df575b600080fd5b61009561009036600461053a565b61019d565b60405190151581526020015b60405180910390f35b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100a1565b6100f26100ed366004610583565b610236565b604051905181526020016100a1565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061023057507fffffffff0000000000000000000000000000000000000000000000000000000082167f50e9a71500000000000000000000000000000000000000000000000000000000145b92915050565b604080516020810190915260008152600061028686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103ab92505050565b905060006102986301e1338085610618565b6102a390600161063a565b90506000600583106102d657507f0000000000000000000000000000000000000000000000000000000000000000610386565b8260040361030557507f0000000000000000000000000000000000000000000000000000000000000000610386565b8260030361033457507f0000000000000000000000000000000000000000000000000000000000000000610386565b8260020361036357507f0000000000000000000000000000000000000000000000000000000000000000610386565b507f00000000000000000000000000000000000000000000000000000000000000005b6040518060200160405280828461039d919061064d565b905298975050505050505050565b8051600090819081905b808210156105315760008583815181106103d1576103d1610664565b01602001516001600160f81b03191690507f800000000000000000000000000000000000000000000000000000000000000081101561041c5761041560018461063a565b925061051e565b7fe0000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156104595761041560028461063a565b7ff0000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156104965761041560038461063a565b7ff8000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156104d35761041560048461063a565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156105105761041560058461063a565b61051b60068461063a565b92505b50826105298161067a565b9350506103b5565b50909392505050565b60006020828403121561054c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461057c57600080fd5b9392505050565b6000806000806060858703121561059957600080fd5b843567ffffffffffffffff808211156105b157600080fd5b818701915087601f8301126105c557600080fd5b8135818111156105d457600080fd5b8860208285010111156105e657600080fd5b6020928301999098509187013596604001359550909350505050565b634e487b7160e01b600052601160045260246000fd5b60008261063557634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561023057610230610602565b808202811582820484141761023057610230610602565b634e487b7160e01b600052603260045260246000fd5b60006001820161068c5761068c610602565b506001019056fea264697066735822122005f6a0fdc4f026a917a180dd255fafa1794caab061b261a8c6c999f749f27ca364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806359b6b86c1161005b57806359b6b86c14610101578063a200e15314610128578063cd5d2c741461014f578063d820ed421461017657600080fd5b806301ffc9a7146100825780632c0fd74c146100aa57806350e9a715146100df575b600080fd5b61009561009036600461053a565b61019d565b60405190151581526020015b60405180910390f35b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100a1565b6100f26100ed366004610583565b610236565b604051905181526020016100a1565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000148061023057507fffffffff0000000000000000000000000000000000000000000000000000000082167f50e9a71500000000000000000000000000000000000000000000000000000000145b92915050565b604080516020810190915260008152600061028686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103ab92505050565b905060006102986301e1338085610618565b6102a390600161063a565b90506000600583106102d657507f0000000000000000000000000000000000000000000000000000000000000000610386565b8260040361030557507f0000000000000000000000000000000000000000000000000000000000000000610386565b8260030361033457507f0000000000000000000000000000000000000000000000000000000000000000610386565b8260020361036357507f0000000000000000000000000000000000000000000000000000000000000000610386565b507f00000000000000000000000000000000000000000000000000000000000000005b6040518060200160405280828461039d919061064d565b905298975050505050505050565b8051600090819081905b808210156105315760008583815181106103d1576103d1610664565b01602001516001600160f81b03191690507f800000000000000000000000000000000000000000000000000000000000000081101561041c5761041560018461063a565b925061051e565b7fe0000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156104595761041560028461063a565b7ff0000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156104965761041560038461063a565b7ff8000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156104d35761041560048461063a565b7ffc000000000000000000000000000000000000000000000000000000000000006001600160f81b0319821610156105105761041560058461063a565b61051b60068461063a565b92505b50826105298161067a565b9350506103b5565b50909392505050565b60006020828403121561054c57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461057c57600080fd5b9392505050565b6000806000806060858703121561059957600080fd5b843567ffffffffffffffff808211156105b157600080fd5b818701915087601f8301126105c557600080fd5b8135818111156105d457600080fd5b8860208285010111156105e657600080fd5b6020928301999098509187013596604001359550909350505050565b634e487b7160e01b600052601160045260246000fd5b60008261063557634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561023057610230610602565b808202811582820484141761023057610230610602565b634e487b7160e01b600052603260045260246000fd5b60006001820161068c5761068c610602565b506001019056fea264697066735822122005f6a0fdc4f026a917a180dd255fafa1794caab061b261a8c6c999f749f27ca364736f6c63430008110033",
  "devdoc": {
    "details": "A simple price oracle for Anytype domains.",
    "kind": "dev",
    "methods": {
      "price(string,uint256,uint256)": {
        "details": "Returns the price to register or renew a name.",
        "params": {
          "duration": "How long the name is being registered or extended for, in seconds.",
          "expires": "When the name presently expires (0 if this is a new registration).",
          "name": "The name being registered or renewed."
        },
        "returns": {
          "_0": "base premium tuple of base price + premium price"
        }
      }
    },
    "title": "AnytypePriceOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}