{
  "address": "0xc99a7403960e9a485278ad2acd890bd59251176d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract DNSSEC",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_gatewayURL",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "CouldNotResolve",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "urls",
          "type": "string[]"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "callbackFunction",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "OffchainLookup",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatewayURL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract DNSSEC",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "resolveCallback",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x147101bb6887454ffb147ecb1fe2467dcb9859e8ae6c9f54f67d8d66299a785f",
  "receipt": {
    "to": null,
    "from": "0x61d1eee7fbf652482dea98a1df591c626ba09a60",
    "contractAddress": "0xc99a7403960e9a485278ad2acd890bd59251176d",
    "transactionIndex": "0x6a",
    "gasUsed": "0x16f44b",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3beb2592b169e131d30ea0892484cc6c7c84605aaaf86937df4d7d51b8e3210a",
    "transactionHash": "0x147101bb6887454ffb147ecb1fe2467dcb9859e8ae6c9f54f67d8d66299a785f",
    "logs": [],
    "blockNumber": "0x37ad46",
    "cumulativeGasUsed": "0xc64238",
    "status": "0x1"
  },
  "args": [
    "0x0e9d17d5fc9a037A92F1aac52D3Bae04b0e30224",
    "0x5fc6fda875c0b5c8d191cf912342c37b7e470a19",
    "https://dnssec-oracle.ens.domains/"
  ],
  "numDeployments": 1,
  "solcInputHash": "a146656c88f3880ec5787b6ed1aeb9b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract DNSSEC\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_gatewayURL\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"CouldNotResolve\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewayURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract DNSSEC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"resolveCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dnsregistrar/OffchainDNSResolver.sol\":\"OffchainDNSResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1300},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dnsregistrar/OffchainDNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../contracts/resolvers/profiles/IAddrResolver.sol\\\";\\nimport \\\"../../contracts/resolvers/profiles/IExtendedResolver.sol\\\";\\nimport \\\"../../contracts/resolvers/profiles/IExtendedDNSResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../dnssec-oracle/BytesUtils.sol\\\";\\nimport \\\"../dnssec-oracle/DNSSEC.sol\\\";\\nimport \\\"../dnssec-oracle/RRUtils.sol\\\";\\nimport \\\"../registry/ENSRegistry.sol\\\";\\nimport \\\"../utils/HexUtils.sol\\\";\\n\\nerror OffchainLookup(\\n    address sender,\\n    string[] urls,\\n    bytes callData,\\n    bytes4 callbackFunction,\\n    bytes extraData\\n);\\n\\ninterface IDNSGateway {\\n    function resolve(\\n        bytes memory name,\\n        uint16 qtype\\n    ) external returns (DNSSEC.RRSetWithSignature[] memory);\\n}\\n\\nuint16 constant CLASS_INET = 1;\\nuint16 constant TYPE_TXT = 16;\\n\\ncontract OffchainDNSResolver is IExtendedResolver {\\n    using RRUtils for *;\\n    using BytesUtils for bytes;\\n    using HexUtils for bytes;\\n\\n    ENS public immutable ens;\\n    DNSSEC public immutable oracle;\\n    string public gatewayURL;\\n\\n    error CouldNotResolve(bytes name);\\n\\n    constructor(ENS _ens, DNSSEC _oracle, string memory _gatewayURL) {\\n        ens = _ens;\\n        oracle = _oracle;\\n        gatewayURL = _gatewayURL;\\n    }\\n\\n    function resolve(\\n        bytes calldata name,\\n        bytes calldata data\\n    ) external view returns (bytes memory) {\\n        string[] memory urls = new string[](1);\\n        urls[0] = gatewayURL;\\n\\n        revert OffchainLookup(\\n            address(this),\\n            urls,\\n            abi.encodeCall(IDNSGateway.resolve, (name, TYPE_TXT)),\\n            OffchainDNSResolver.resolveCallback.selector,\\n            abi.encode(name, data)\\n        );\\n    }\\n\\n    function resolveCallback(\\n        bytes calldata response,\\n        bytes calldata extraData\\n    ) external view returns (bytes memory) {\\n        (bytes memory name, bytes memory query) = abi.decode(\\n            extraData,\\n            (bytes, bytes)\\n        );\\n        DNSSEC.RRSetWithSignature[] memory rrsets = abi.decode(\\n            response,\\n            (DNSSEC.RRSetWithSignature[])\\n        );\\n\\n        (bytes memory data, ) = oracle.verifyRRSet(rrsets);\\n        for (\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\n            !iter.done();\\n            iter.next()\\n        ) {\\n            // Ignore records with wrong name, type, or class\\n            bytes memory rrname = RRUtils.readName(iter.data, iter.offset);\\n            if (\\n                !rrname.equals(name) ||\\n                iter.class != CLASS_INET ||\\n                iter.dnstype != TYPE_TXT\\n            ) {\\n                continue;\\n            }\\n\\n            // Look for a valid ENS-DNS TXT record\\n            (address dnsresolver, bytes memory context) = parseRR(\\n                iter.data,\\n                iter.rdataOffset,\\n                iter.nextOffset\\n            );\\n\\n            // If we found a valid record, try to resolve it\\n            if (dnsresolver != address(0)) {\\n                if (\\n                    IERC165(dnsresolver).supportsInterface(\\n                        IExtendedDNSResolver.resolve.selector\\n                    )\\n                ) {\\n                    return\\n                        IExtendedDNSResolver(dnsresolver).resolve(\\n                            name,\\n                            query,\\n                            context\\n                        );\\n                } else if (\\n                    IERC165(dnsresolver).supportsInterface(\\n                        IExtendedResolver.resolve.selector\\n                    )\\n                ) {\\n                    return IExtendedResolver(dnsresolver).resolve(name, query);\\n                } else {\\n                    (bool ok, bytes memory ret) = address(dnsresolver)\\n                        .staticcall(query);\\n                    if (ok) {\\n                        return ret;\\n                    } else {\\n                        revert CouldNotResolve(name);\\n                    }\\n                }\\n            }\\n        }\\n\\n        // No valid records; revert.\\n        revert CouldNotResolve(name);\\n    }\\n\\n    function parseRR(\\n        bytes memory data,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal view returns (address, bytes memory) {\\n        bytes memory txt = readTXT(data, idx, lastIdx);\\n\\n        // Must start with the magic word\\n        if (txt.length < 5 || !txt.equals(0, \\\"ENS1 \\\", 0, 5)) {\\n            return (address(0), \\\"\\\");\\n        }\\n\\n        // Parse the name or address\\n        uint256 lastTxtIdx = txt.find(5, txt.length - 5, \\\" \\\");\\n        if (lastTxtIdx > txt.length) {\\n            address dnsResolver = parseAndResolve(txt, 5, txt.length);\\n            return (dnsResolver, \\\"\\\");\\n        } else {\\n            address dnsResolver = parseAndResolve(txt, 5, lastTxtIdx);\\n            return (\\n                dnsResolver,\\n                txt.substring(lastTxtIdx + 1, txt.length - lastTxtIdx - 1)\\n            );\\n        }\\n    }\\n\\n    function readTXT(\\n        bytes memory data,\\n        uint256 startIdx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes memory) {\\n        // TODO: Concatenate multiple text fields\\n        uint256 fieldLength = data.readUint8(startIdx);\\n        assert(startIdx + fieldLength < lastIdx);\\n        return data.substring(startIdx + 1, fieldLength);\\n    }\\n\\n    function parseAndResolve(\\n        bytes memory nameOrAddress,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal view returns (address) {\\n        if (nameOrAddress[idx] == \\\"0\\\" && nameOrAddress[idx + 1] == \\\"x\\\") {\\n            (address ret, bool valid) = nameOrAddress.hexToAddress(\\n                idx + 2,\\n                lastIdx\\n            );\\n            if (valid) {\\n                return ret;\\n            }\\n        }\\n        return resolveName(nameOrAddress, idx, lastIdx);\\n    }\\n\\n    function resolveName(\\n        bytes memory name,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal view returns (address) {\\n        bytes32 node = textNamehash(name, idx, lastIdx);\\n        address resolver = ens.resolver(node);\\n        if (resolver == address(0)) {\\n            return address(0);\\n        }\\n        return IAddrResolver(resolver).addr(node);\\n    }\\n\\n    /**\\n     * @dev Namehash function that operates on dot-separated names (not dns-encoded names)\\n     * @param name Name to hash\\n     * @param idx Index to start at\\n     * @param lastIdx Index to end at\\n     */\\n    function textNamehash(\\n        bytes memory name,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal view returns (bytes32) {\\n        uint256 separator = name.find(idx, name.length - idx, bytes1(\\\".\\\"));\\n        bytes32 parentNode = bytes32(0);\\n        if (separator < lastIdx) {\\n            parentNode = textNamehash(name, separator + 1, lastIdx);\\n        } else {\\n            separator = lastIdx;\\n        }\\n        return\\n            keccak256(\\n                abi.encodePacked(parentNode, name.keccak(idx, separator - idx))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x2e0c9c2c85ac06b8a9a012e37e72c5b63b403c027d0cbc0ab1659ddafa26bef4\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\n\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal.\\n     * @param self The first bytes to compare.\\n     * @param other The second bytes to compare.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns a positive number if `other` comes lexicographically after\\n     *      `self`, a negative number if it comes before, or zero if the\\n     *      contents of the two bytes are equal. Comparison is done per-rune,\\n     *      on unicode codepoints.\\n     * @param self The first bytes to compare.\\n     * @param offset The offset of self.\\n     * @param len    The length of self.\\n     * @param other The second bytes to compare.\\n     * @param otheroffset The offset of the other string.\\n     * @param otherlen    The length of the other string.\\n     * @return The result of the comparison.\\n     */\\n    function compare(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len,\\n        bytes memory other,\\n        uint256 otheroffset,\\n        uint256 otherlen\\n    ) internal pure returns (int256) {\\n        if (offset + len > self.length) {\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\n        }\\n        if (otheroffset + otherlen > other.length) {\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\n        }\\n\\n        uint256 shortest = len;\\n        if (otherlen < len) shortest = otherlen;\\n\\n        uint256 selfptr;\\n        uint256 otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\n            uint256 a;\\n            uint256 b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint256 mask;\\n                if (shortest - idx >= 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (idx + 32 - shortest)) - 1);\\n                }\\n                int256 diff = int256(a & mask) - int256(b & mask);\\n                if (diff != 0) return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int256(len) - int256(otherlen);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @param len The number of bytes to compare\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset,\\n        uint256 len\\n    ) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal with offsets.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @param otherOffset The offset into the second byte range.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other,\\n        uint256 otherOffset\\n    ) internal pure returns (bool) {\\n        return\\n            keccak(self, offset, self.length - offset) ==\\n            keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n     * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n     *      they are equal.\\n     * @param self The first byte range to compare.\\n     * @param offset The offset into the first byte range.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        uint256 offset,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == offset + other.length &&\\n            equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n     * @dev Returns true if the two byte ranges are equal.\\n     * @param self The first byte range to compare.\\n     * @param other The second byte range to compare.\\n     * @return True if the byte ranges are equal, false otherwise.\\n     */\\n    function equals(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        return\\n            self.length == other.length &&\\n            equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n     * @dev Returns the 8-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 8 bits of the string, interpreted as an integer.\\n     */\\n    function readUint8(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n     * @dev Returns the 16-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 16 bits of the string, interpreted as an integer.\\n     */\\n    function readUint16(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32-bit number at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bits of the string, interpreted as an integer.\\n     */\\n    function readUint32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes32(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the 32 byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytes20(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(\\n                mload(add(add(self, 32), idx)),\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /*\\n     * @dev Returns the n byte value at the specified index of self.\\n     * @param self The byte string.\\n     * @param idx The index into the bytes.\\n     * @param len The number of bytes.\\n     * @return The specified 32 bytes of the string.\\n     */\\n    function readBytesN(\\n        bytes memory self,\\n        uint256 idx,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\n        }\\n    }\\n\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint256 mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n     * @dev Copies a substring into a new byte string.\\n     * @param self The byte string to copy from.\\n     * @param offset The offset to start copying at.\\n     * @param len The number of bytes to copy.\\n     */\\n    function substring(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint256 dest;\\n        uint256 src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable =\\n        hex\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\";\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len\\n    ) internal pure returns (bytes32) {\\n        require(len <= 52);\\n\\n        uint256 ret = 0;\\n        uint8 decoded;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if (i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint256 bitlen = len * 5;\\n        if (len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if (len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if (len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if (len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if (len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n\\n    /**\\n     * @dev Finds the first occurrence of the byte `needle` in `self`.\\n     * @param self The string to search\\n     * @param off The offset to start searching at\\n     * @param len The number of bytes to search\\n     * @param needle The byte to search for\\n     * @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\n     */\\n    function find(\\n        bytes memory self,\\n        uint256 off,\\n        uint256 len,\\n        bytes1 needle\\n    ) internal pure returns (uint256) {\\n        for (uint256 idx = off; idx < off + len; idx++) {\\n            if (self[idx] == needle) {\\n                return idx;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n}\\n\",\"keccak256\":\"0x4f10902639b85a17ae10745264feff322e793bfb1bc130a9a90efa7dda47c6cc\"},\"contracts/dnssec-oracle/DNSSEC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nabstract contract DNSSEC {\\n    bytes public anchors;\\n\\n    struct RRSetWithSignature {\\n        bytes rrset;\\n        bytes sig;\\n    }\\n\\n    event AlgorithmUpdated(uint8 id, address addr);\\n    event DigestUpdated(uint8 id, address addr);\\n\\n    function verifyRRSet(\\n        RRSetWithSignature[] memory input\\n    ) external view virtual returns (bytes memory rrs, uint32 inception);\\n\\n    function verifyRRSet(\\n        RRSetWithSignature[] memory input,\\n        uint256 now\\n    ) public view virtual returns (bytes memory rrs, uint32 inception);\\n}\\n\",\"keccak256\":\"0xee6a236a59e5db8418c98ee4640a91987d26533c02d305cc6c7a37a3ac4ee907\",\"license\":\"MIT\"},\"contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"./BytesUtils.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n * @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n */\\nlibrary RRUtils {\\n    using BytesUtils for *;\\n    using Buffer for *;\\n\\n    /**\\n     * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The length of the DNS name at 'offset', in bytes.\\n     */\\n    function nameLength(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 idx = offset;\\n        while (true) {\\n            assert(idx < self.length);\\n            uint256 labelLen = self.readUint8(idx);\\n            idx += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n        }\\n        return idx - offset;\\n    }\\n\\n    /**\\n     * @dev Returns a DNS format name at the specified offset of self.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return ret The name.\\n     */\\n    function readName(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes memory ret) {\\n        uint256 len = nameLength(self, offset);\\n        return self.substring(offset, len);\\n    }\\n\\n    /**\\n     * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n     * @param self The byte array to read a name from.\\n     * @param offset The offset to start reading at.\\n     * @return The number of labels in the DNS name at 'offset', in bytes.\\n     */\\n    function labelCount(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (uint256) {\\n        uint256 count = 0;\\n        while (true) {\\n            assert(offset < self.length);\\n            uint256 labelLen = self.readUint8(offset);\\n            offset += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n            count += 1;\\n        }\\n        return count;\\n    }\\n\\n    uint256 constant RRSIG_TYPE = 0;\\n    uint256 constant RRSIG_ALGORITHM = 2;\\n    uint256 constant RRSIG_LABELS = 3;\\n    uint256 constant RRSIG_TTL = 4;\\n    uint256 constant RRSIG_EXPIRATION = 8;\\n    uint256 constant RRSIG_INCEPTION = 12;\\n    uint256 constant RRSIG_KEY_TAG = 16;\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\n\\n    struct SignedSet {\\n        uint16 typeCovered;\\n        uint8 algorithm;\\n        uint8 labels;\\n        uint32 ttl;\\n        uint32 expiration;\\n        uint32 inception;\\n        uint16 keytag;\\n        bytes signerName;\\n        bytes data;\\n        bytes name;\\n    }\\n\\n    function readSignedSet(\\n        bytes memory data\\n    ) internal pure returns (SignedSet memory self) {\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\n        self.labels = data.readUint8(RRSIG_LABELS);\\n        self.ttl = data.readUint32(RRSIG_TTL);\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\n        self.data = data.substring(\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\n        );\\n    }\\n\\n    function rrs(\\n        SignedSet memory rrset\\n    ) internal pure returns (RRIterator memory) {\\n        return iterateRRs(rrset.data, 0);\\n    }\\n\\n    /**\\n     * @dev An iterator over resource records.\\n     */\\n    struct RRIterator {\\n        bytes data;\\n        uint256 offset;\\n        uint16 dnstype;\\n        uint16 class;\\n        uint32 ttl;\\n        uint256 rdataOffset;\\n        uint256 nextOffset;\\n    }\\n\\n    /**\\n     * @dev Begins iterating over resource records.\\n     * @param self The byte string to read from.\\n     * @param offset The offset to start reading at.\\n     * @return ret An iterator object.\\n     */\\n    function iterateRRs(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (RRIterator memory ret) {\\n        ret.data = self;\\n        ret.nextOffset = offset;\\n        next(ret);\\n    }\\n\\n    /**\\n     * @dev Returns true iff there are more RRs to iterate.\\n     * @param iter The iterator to check.\\n     * @return True iff the iterator has finished.\\n     */\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\n        return iter.offset >= iter.data.length;\\n    }\\n\\n    /**\\n     * @dev Moves the iterator to the next resource record.\\n     * @param iter The iterator to advance.\\n     */\\n    function next(RRIterator memory iter) internal pure {\\n        iter.offset = iter.nextOffset;\\n        if (iter.offset >= iter.data.length) {\\n            return;\\n        }\\n\\n        // Skip the name\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n        // Read type, class, and ttl\\n        iter.dnstype = iter.data.readUint16(off);\\n        off += 2;\\n        iter.class = iter.data.readUint16(off);\\n        off += 2;\\n        iter.ttl = iter.data.readUint32(off);\\n        off += 4;\\n\\n        // Read the rdata\\n        uint256 rdataLength = iter.data.readUint16(off);\\n        off += 2;\\n        iter.rdataOffset = off;\\n        iter.nextOffset = off + rdataLength;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the owner name from the RR.\\n     */\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.offset,\\n                nameLength(iter.data, iter.offset)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the rdata portion of the current record.\\n     * @param iter The iterator.\\n     * @return A new bytes object containing the RR's RDATA.\\n     */\\n    function rdata(\\n        RRIterator memory iter\\n    ) internal pure returns (bytes memory) {\\n        return\\n            iter.data.substring(\\n                iter.rdataOffset,\\n                iter.nextOffset - iter.rdataOffset\\n            );\\n    }\\n\\n    uint256 constant DNSKEY_FLAGS = 0;\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\n    uint256 constant DNSKEY_PUBKEY = 4;\\n\\n    struct DNSKEY {\\n        uint16 flags;\\n        uint8 protocol;\\n        uint8 algorithm;\\n        bytes publicKey;\\n    }\\n\\n    function readDNSKEY(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DNSKEY memory self) {\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\n        self.publicKey = data.substring(\\n            offset + DNSKEY_PUBKEY,\\n            length - DNSKEY_PUBKEY\\n        );\\n    }\\n\\n    uint256 constant DS_KEY_TAG = 0;\\n    uint256 constant DS_ALGORITHM = 2;\\n    uint256 constant DS_DIGEST_TYPE = 3;\\n    uint256 constant DS_DIGEST = 4;\\n\\n    struct DS {\\n        uint16 keytag;\\n        uint8 algorithm;\\n        uint8 digestType;\\n        bytes digest;\\n    }\\n\\n    function readDS(\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 length\\n    ) internal pure returns (DS memory self) {\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\n    }\\n\\n    function isSubdomainOf(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (bool) {\\n        uint256 off = 0;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        while (counts > othercounts) {\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        return self.equals(off, other, 0);\\n    }\\n\\n    function compareNames(\\n        bytes memory self,\\n        bytes memory other\\n    ) internal pure returns (int256) {\\n        if (self.equals(other)) {\\n            return 0;\\n        }\\n\\n        uint256 off;\\n        uint256 otheroff;\\n        uint256 prevoff;\\n        uint256 otherprevoff;\\n        uint256 counts = labelCount(self, 0);\\n        uint256 othercounts = labelCount(other, 0);\\n\\n        // Keep removing labels from the front of the name until both names are equal length\\n        while (counts > othercounts) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        while (othercounts > counts) {\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            othercounts--;\\n        }\\n\\n        // Compare the last nonequal labels to each other\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            counts -= 1;\\n        }\\n\\n        if (off == 0) {\\n            return -1;\\n        }\\n        if (otheroff == 0) {\\n            return 1;\\n        }\\n\\n        return\\n            self.compare(\\n                prevoff + 1,\\n                self.readUint8(prevoff),\\n                other,\\n                otherprevoff + 1,\\n                other.readUint8(otherprevoff)\\n            );\\n    }\\n\\n    /**\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\n     */\\n    function serialNumberGte(\\n        uint32 i1,\\n        uint32 i2\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            return int32(i1) - int32(i2) >= 0;\\n        }\\n    }\\n\\n    function progress(\\n        bytes memory body,\\n        uint256 off\\n    ) internal pure returns (uint256) {\\n        return off + 1 + body.readUint8(off);\\n    }\\n\\n    /**\\n     * @dev Computes the keytag for a chunk of data.\\n     * @param data The data to compute a keytag for.\\n     * @return The computed key tag.\\n     */\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n        /* This function probably deserves some explanation.\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\n         *\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n         *         uint ac;\\n         *         for (uint i = 0; i < data.length; i++) {\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\n         *         }\\n         *         return uint16(ac + (ac >> 16));\\n         *     }\\n         *\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\n         * large words work in our favour.\\n         *\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\n         *\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\n         * and the remaining sums can be done just on ac1.\\n         */\\n        unchecked {\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\n            uint256 ac1;\\n            uint256 ac2;\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\n                uint256 word;\\n                assembly {\\n                    word := mload(add(add(data, 32), i))\\n                }\\n                if (i + 32 > data.length) {\\n                    uint256 unused = 256 - (data.length - i) * 8;\\n                    word = (word >> unused) << unused;\\n                }\\n                ac1 +=\\n                    (word &\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\n                    8;\\n                ac2 += (word &\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\n            }\\n            ac1 =\\n                (ac1 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac1 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac2 =\\n                (ac2 &\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\n                ((ac2 &\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\n                    16);\\n            ac1 = (ac1 << 8) + ac2;\\n            ac1 =\\n                (ac1 &\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\n                    32);\\n            ac1 =\\n                (ac1 &\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\n                ((ac1 &\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\n                    64);\\n            ac1 =\\n                (ac1 &\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\n                (ac1 >> 128);\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\n            return uint16(ac1);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4dd68a6efd7c38f6b0e95ca0c056ecb74f88583da650b1a8639e6e78be36fede\"},\"contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"contracts/registry/ENSRegistry.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nimport \\\"./ENS.sol\\\";\\n\\n/**\\n * The ENS registry contract.\\n */\\ncontract ENSRegistry is ENS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32 => Record) records;\\n    mapping(address => mapping(address => bool)) operators;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier authorised(bytes32 node) {\\n        address owner = records[node].owner;\\n        require(owner == msg.sender || operators[owner][msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructs a new ENS registry.\\n     */\\n    constructor() public {\\n        records[0x0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Sets the record for a node.\\n     * @param node The node to update.\\n     * @param owner The address of the new owner.\\n     * @param resolver The address of the resolver.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external virtual override {\\n        setOwner(node, owner);\\n        _setResolverAndTTL(node, resolver, ttl);\\n    }\\n\\n    /**\\n     * @dev Sets the record for a subnode.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     * @param resolver The address of the resolver.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external virtual override {\\n        bytes32 subnode = setSubnodeOwner(node, label, owner);\\n        _setResolverAndTTL(subnode, resolver, ttl);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner The address of the new owner.\\n     */\\n    function setOwner(\\n        bytes32 node,\\n        address owner\\n    ) public virtual override authorised(node) {\\n        _setOwner(node, owner);\\n        emit Transfer(node, owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) public virtual override authorised(node) returns (bytes32) {\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n        _setOwner(subnode, owner);\\n        emit NewOwner(node, label, owner);\\n        return subnode;\\n    }\\n\\n    /**\\n     * @dev Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver The address of the resolver.\\n     */\\n    function setResolver(\\n        bytes32 node,\\n        address resolver\\n    ) public virtual override authorised(node) {\\n        emit NewResolver(node, resolver);\\n        records[node].resolver = resolver;\\n    }\\n\\n    /**\\n     * @dev Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setTTL(\\n        bytes32 node,\\n        uint64 ttl\\n    ) public virtual override authorised(node) {\\n        emit NewTTL(node, ttl);\\n        records[node].ttl = ttl;\\n    }\\n\\n    /**\\n     * @dev Enable or disable approval for a third party (\\\"operator\\\") to manage\\n     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\\n     * @param operator Address to add to the set of authorized operators.\\n     * @param approved True if the operator is approved, false to revoke approval.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) external virtual override {\\n        operators[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns the address that owns the specified node.\\n     * @param node The specified node.\\n     * @return address of the owner.\\n     */\\n    function owner(\\n        bytes32 node\\n    ) public view virtual override returns (address) {\\n        address addr = records[node].owner;\\n        if (addr == address(this)) {\\n            return address(0x0);\\n        }\\n\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the resolver for the specified node.\\n     * @param node The specified node.\\n     * @return address of the resolver.\\n     */\\n    function resolver(\\n        bytes32 node\\n    ) public view virtual override returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * @dev Returns the TTL of a node, and any records associated with it.\\n     * @param node The specified node.\\n     * @return ttl of the node.\\n     */\\n    function ttl(bytes32 node) public view virtual override returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * @dev Returns whether a record has been imported to the registry.\\n     * @param node The specified node.\\n     * @return Bool if record exists\\n     */\\n    function recordExists(\\n        bytes32 node\\n    ) public view virtual override returns (bool) {\\n        return records[node].owner != address(0x0);\\n    }\\n\\n    /**\\n     * @dev Query if an address is an authorized operator for another address.\\n     * @param owner The address that owns the records.\\n     * @param operator The address that acts on behalf of the owner.\\n     * @return True if `operator` is an approved operator for `owner`, false otherwise.\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view virtual override returns (bool) {\\n        return operators[owner][operator];\\n    }\\n\\n    function _setOwner(bytes32 node, address owner) internal virtual {\\n        records[node].owner = owner;\\n    }\\n\\n    function _setResolverAndTTL(\\n        bytes32 node,\\n        address resolver,\\n        uint64 ttl\\n    ) internal {\\n        if (resolver != records[node].resolver) {\\n            records[node].resolver = resolver;\\n            emit NewResolver(node, resolver);\\n        }\\n\\n        if (ttl != records[node].ttl) {\\n            records[node].ttl = ttl;\\n            emit NewTTL(node, ttl);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7a7a64fb980e521c991415e416fd4106a42f892479805e1daa51ecb0e2e5198\"},\"contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedDNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedDNSResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data,\\n        bytes memory context\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x541f8799c34ff9e7035d09f06ae0f0f8a16b6065e9b60a15670b957321630f72\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/IExtendedResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IExtendedResolver {\\n    function resolve(\\n        bytes memory name,\\n        bytes memory data\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x5d81521cfae7d9a4475d27533cd8ed0d3475d369eb0674fd90ffbdbdf292faa3\",\"license\":\"MIT\"},\"contracts/utils/HexUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary HexUtils {\\n    /**\\n     * @dev Attempts to parse bytes32 from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexStringToBytes32(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (bytes32 r, bool valid) {\\n        valid = true;\\n        assembly {\\n            // check that the index to read to is not past the end of the string\\n            if gt(lastIdx, mload(str)) {\\n                revert(0, 0)\\n            }\\n\\n            function getHex(c) -> ascii {\\n                // chars 48-57: 0-9\\n                if and(gt(c, 47), lt(c, 58)) {\\n                    ascii := sub(c, 48)\\n                    leave\\n                }\\n                // chars 65-70: A-F\\n                if and(gt(c, 64), lt(c, 71)) {\\n                    ascii := add(sub(c, 65), 10)\\n                    leave\\n                }\\n                // chars 97-102: a-f\\n                if and(gt(c, 96), lt(c, 103)) {\\n                    ascii := add(sub(c, 97), 10)\\n                    leave\\n                }\\n                // invalid char\\n                ascii := 0xff\\n            }\\n\\n            let ptr := add(str, 32)\\n            for {\\n                let i := idx\\n            } lt(i, lastIdx) {\\n                i := add(i, 2)\\n            } {\\n                let byte1 := getHex(byte(0, mload(add(ptr, i))))\\n                let byte2 := getHex(byte(0, mload(add(ptr, add(i, 1)))))\\n                // if either byte is invalid, set invalid and break loop\\n                if or(eq(byte1, 0xff), eq(byte2, 0xff)) {\\n                    valid := false\\n                    break\\n                }\\n                let combined := or(shl(4, byte1), byte2)\\n                r := or(shl(8, r), combined)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to parse an address from a hex string\\n     * @param str The string to parse\\n     * @param idx The offset to start parsing at\\n     * @param lastIdx The (exclusive) last index in `str` to consider. Use `str.length` to scan the whole string.\\n     */\\n    function hexToAddress(\\n        bytes memory str,\\n        uint256 idx,\\n        uint256 lastIdx\\n    ) internal pure returns (address, bool) {\\n        if (lastIdx - idx < 40) return (address(0x0), false);\\n        (bytes32 r, bool valid) = hexStringToBytes32(str, idx, lastIdx);\\n        return (address(uint160(uint256(r))), valid);\\n    }\\n}\\n\",\"keccak256\":\"0xcae20ad72181f47dfe7fba7d88e8d902a01576b16e93362878e726989d6cfb4d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001c0238038062001c0283398101604081905262000034916200008e565b6001600160a01b03808416608052821660a05260006200005582826200021d565b50505050620002e9565b6001600160a01b03811681146200007557600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215620000a457600080fd5b8351620000b1816200005f565b80935050602080850151620000c6816200005f565b60408601519093506001600160401b0380821115620000e457600080fd5b818701915087601f830112620000f957600080fd5b8151818111156200010e576200010e62000078565b604051601f8201601f19908116603f0116810190838211818310171562000139576200013962000078565b816040528281528a868487010111156200015257600080fd5b600093505b8284101562000176578484018601518185018701529285019262000157565b60008684830101528096505050505050509250925092565b600181811c90821680620001a357607f821691505b602082108103620001c457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021857600081815260208120601f850160051c81016020861015620001f35750805b601f850160051c820191505b818110156200021457828155600101620001ff565b5050505b505050565b81516001600160401b0381111562000239576200023962000078565b62000251816200024a84546200018e565b84620001ca565b602080601f831160018114620002895760008415620002705750858301515b600019600386901b1c1916600185901b17855562000214565b600085815260208120601f198616915b82811015620002ba5788860151825594840194600190910190840162000299565b5085821015620002d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a0516118e76200031b6000396000818160ca015261039901526000818160710152610e7001526118e76000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637dc0d1d0116100505780637dc0d1d0146100c55780639061b923146100ec578063b4a85801146100ff57600080fd5b80633f15457f1461006c57806352539968146100b0575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b8610112565b6040516100a7919061114c565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100b86100fa3660046111a8565b6101a0565b6100b861010d3660046111a8565b61036f565b6000805461011f90611214565b80601f016020809104026020016040519081016040528092919081815260200182805461014b90611214565b80156101985780601f1061016d57610100808354040283529160200191610198565b820191906000526020600020905b81548152906001019060200180831161017b57829003601f168201915b505050505081565b60408051600180825281830190925260609160009190816020015b60608152602001906001900390816101bb579050509050600080546101df90611214565b80601f016020809104026020016040519081016040528092919081815260200182805461020b90611214565b80156102585780601f1061022d57610100808354040283529160200191610258565b820191906000526020600020905b81548152906001019060200180831161023b57829003601f168201915b50505050508160008151811061027057610270611264565b6020026020010181905250308187876010604051602401610293939291906112a3565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f31b137b90000000000000000000000000000000000000000000000000000000017905290517fb4a858010000000000000000000000000000000000000000000000000000000091610322918c918c918c918c91016112cb565b60408051601f19818403018152908290527f556f183000000000000000000000000000000000000000000000000000000000825261036695949392916004016112fd565b60405180910390fd5b606060008061038084860186611499565b90925090506000610393878901896114fd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef836040518263ffffffff1660e01b81526004016103e3919061161b565b600060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042891908101906116e5565b5090506000610437828261072c565b90505b8051516020820151101561070857600061045c82600001518360200151610793565b905061046881876107ae565b158061047d5750606082015161ffff16600114155b806104915750604082015161ffff16601014155b1561049c57506106fa565b6000806104b684600001518560a001518660c001516107d3565b90925090506001600160a01b038216156106f6576040516301ffc9a760e01b815263477cc53f60e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190611740565b156105c25760405163477cc53f60e11b81526001600160a01b03831690638ef98a7e9061056e908b908b908690600401611762565b600060405180830381865afa15801561058b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b3919081019061179b565b98505050505050505050610724565b6040516301ffc9a760e01b8152639061b92360e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106319190611740565b1561066457604051639061b92360e01b81526001600160a01b03831690639061b9239061056e908b908b906004016117d0565b600080836001600160a01b03168960405161067f91906117f5565b600060405180830381855afa9150503d80600081146106ba576040519150601f19603f3d011682016040523d82523d6000602084013e6106bf565b606091505b509150915081156106db57995061072498505050505050505050565b896040516314d3b60360e11b8152600401610366919061114c565b5050505b61070381610922565b61043a565b50836040516314d3b60360e11b8152600401610366919061114c565b949350505050565b61077a6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c0810182905261078d81610922565b92915050565b606060006107a18484610a0a565b9050610724848483610a64565b6000815183511480156107cc57506107cc8360008460008751610ae6565b9392505050565b6000606060006107e4868686610b09565b905060058151108061083957506040805180820190915260058082527f454e5331200000000000000000000000000000000000000000000000000000006020830152610837918391600091908290610ae6565b155b1561085757505060408051602081019091526000808252915061091a565b6000610894600580845161086b9190611827565b8491907f2000000000000000000000000000000000000000000000000000000000000000610b53565b905081518111156108cb5760006108ae8360058551610bef565b604080516020810190915260008152909550935061091a92505050565b60006108d983600584610bef565b90508061090b6108ea84600161183a565b60018587516108f99190611827565b6109039190611827565b869190610a64565b9450945050505061091a565b50505b935093915050565b60c081015160208201819052815151116109395750565b600061094d82600001518360200151610a0a565b826020015161095c919061183a565b825190915061096b9082610cf9565b61ffff16604083015261097f60028261183a565b825190915061098e9082610cf9565b61ffff1660608301526109a260028261183a565b82519091506109b19082610d21565b63ffffffff1660808301526109c760048261183a565b82519091506000906109d99083610cf9565b61ffff1690506109ea60028361183a565b60a0840181905291506109fd818361183a565b60c0909301929092525050565b6000815b83518110610a1e57610a1e61184d565b6000610a2a8583610d4b565b60ff169050610a3a81600161183a565b610a44908361183a565b915080600003610a545750610a5a565b50610a0e565b6107248382611827565b8251606090610a73838561183a565b1115610a7e57600080fd5b60008267ffffffffffffffff811115610a9957610a9961124e565b6040519080825280601f01601f191660200182016040528015610ac3576020820181803683370190505b50905060208082019086860101610adb828287610d6f565b509095945050505050565b6000610af3848484610dc5565b610afe878785610dc5565b149695505050505050565b60606000610b178585610d4b565b60ff16905082610b27828661183a565b10610b3457610b3461184d565b610b4a610b4285600161183a565b869083610a64565b95945050505050565b6000835b610b61848661183a565b811015610be257827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916868281518110610b9d57610b9d611264565b01602001517fff000000000000000000000000000000000000000000000000000000000000001603610bd0579050610724565b80610bda81611863565b915050610b57565b5060001995945050505050565b6000838381518110610c0357610c03611264565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f3000000000000000000000000000000000000000000000000000000000000000148015610cbb575083610c6084600161183a565b81518110610c7057610c70611264565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f7800000000000000000000000000000000000000000000000000000000000000145b15610cee57600080610cd9610cd186600261183a565b879086610de9565b915091508015610ceb575090506107cc565b50505b610724848484610e25565b8151600090610d0983600261183a565b1115610d1457600080fd5b50016002015161ffff1690565b8151600090610d3183600461183a565b1115610d3c57600080fd5b50016004015163ffffffff1690565b6000828281518110610d5f57610d5f611264565b016020015160f81c905092915050565b60208110610da75781518352610d8660208461183a565b9250610d9360208361183a565b9150610da0602082611827565b9050610d6f565b905182516020929092036101000a6000190180199091169116179052565b8251600090610dd4838561183a565b1115610ddf57600080fd5b5091016020012090565b6000806028610df88585611827565b1015610e095750600090508061091a565b600080610e17878787610f82565b909890975095505050505050565b600080610e33858585611049565b6040517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611894565b90506001600160a01b038116610ef6576000925050506107cc565b6040517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03821690633b3b57de90602401602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190611894565b9695505050505050565b8251600090600190831115610f9657600080fd5b610fe7565b6000603a8210602f83111615610fb35750602f190190565b60478210604083111615610fc957506036190190565b60678210606083111615610fdf57506056190190565b5060ff919050565b60208501845b84811015610917576110048183015160001a610f9b565b6110166001830184015160001a610f9b565b60ff811460ff8314171561102f57600094505050610917565b60049190911b1760089490941b9390931792600201610fed565b6000806110868485875161105d9190611827565b8791907f2e00000000000000000000000000000000000000000000000000000000000000610b53565b90506000838210156110ae576110a7866110a184600161183a565b86611049565b90506110b2565b8391505b806110c9866110c18186611827565b899190610dc5565b60408051602081019390935282015260600160405160208183030381529060405280519060200120925050509392505050565b60005b838110156111175781810151838201526020016110ff565b50506000910152565b600081518084526111388160208601602086016110fc565b601f01601f19169290920160200192915050565b6020815260006107cc6020830184611120565b60008083601f84011261117157600080fd5b50813567ffffffffffffffff81111561118957600080fd5b6020830191508360208285010111156111a157600080fd5b9250929050565b600080600080604085870312156111be57600080fd5b843567ffffffffffffffff808211156111d657600080fd5b6111e28883890161115f565b909650945060208701359150808211156111fb57600080fd5b506112088782880161115f565b95989497509550505050565b600181811c9082168061122857607f821691505b60208210810361124857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006112b760408301858761127a565b905061ffff83166020830152949350505050565b6040815260006112df60408301868861127a565b82810360208401526112f281858761127a565b979650505050505050565b600060a082016001600160a01b0388168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b828110156113625760bf19888703018452611350868351611120565b95509284019290840190600101611334565b505050505082810360408401526113798187611120565b7fffffffff0000000000000000000000000000000000000000000000000000000086166060850152905082810360808401526113b58185611120565b98975050505050505050565b6040805190810167ffffffffffffffff811182821017156113e4576113e461124e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156114135761141361124e565b604052919050565b600067ffffffffffffffff8211156114355761143561124e565b50601f01601f191660200190565b600082601f83011261145457600080fd5b81356114676114628261141b565b6113ea565b81815284602083860101111561147c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156114ac57600080fd5b823567ffffffffffffffff808211156114c457600080fd5b6114d086838701611443565b935060208501359150808211156114e657600080fd5b506114f385828601611443565b9150509250929050565b6000602080838503121561151057600080fd5b823567ffffffffffffffff8082111561152857600080fd5b818501915085601f83011261153c57600080fd5b81358181111561154e5761154e61124e565b8060051b61155d8582016113ea565b918252838101850191858101908984111561157757600080fd5b86860192505b8383101561160e578235858111156115955760008081fd5b86016040818c03601f19018113156115ad5760008081fd5b6115b56113c1565b89830135888111156115c75760008081fd5b6115d58e8c83870101611443565b8252509082013590878211156115eb5760008081fd5b6115f98d8b84860101611443565b818b015284525050918601919086019061157d565b9998505050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561169257888303603f190185528151805187855261166688860182611120565b91890151858303868b015291905061167e8183611120565b968901969450505090860190600101611642565b509098975050505050505050565b600082601f8301126116b157600080fd5b81516116bf6114628261141b565b8181528460208386010111156116d457600080fd5b6107248260208301602087016110fc565b600080604083850312156116f857600080fd5b825167ffffffffffffffff81111561170f57600080fd5b61171b858286016116a0565b925050602083015163ffffffff8116811461173557600080fd5b809150509250929050565b60006020828403121561175257600080fd5b815180151581146107cc57600080fd5b6060815260006117756060830186611120565b82810360208401526117878186611120565b90508281036040840152610f788185611120565b6000602082840312156117ad57600080fd5b815167ffffffffffffffff8111156117c457600080fd5b610724848285016116a0565b6040815260006117e36040830185611120565b8281036020840152610b4a8185611120565b600082516118078184602087016110fc565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561078d5761078d611811565b8082018082111561078d5761078d611811565b634e487b7160e01b600052600160045260246000fd5b60006001820161187557611875611811565b5060010190565b6001600160a01b038116811461189157600080fd5b50565b6000602082840312156118a657600080fd5b81516107cc8161187c56fea2646970667358221220d404c16ec670c2b6592100de5c4c0099897d0cb617905f5afce8339d1c2991ad64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80637dc0d1d0116100505780637dc0d1d0146100c55780639061b923146100ec578063b4a85801146100ff57600080fd5b80633f15457f1461006c57806352539968146100b0575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b8610112565b6040516100a7919061114c565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100b86100fa3660046111a8565b6101a0565b6100b861010d3660046111a8565b61036f565b6000805461011f90611214565b80601f016020809104026020016040519081016040528092919081815260200182805461014b90611214565b80156101985780601f1061016d57610100808354040283529160200191610198565b820191906000526020600020905b81548152906001019060200180831161017b57829003601f168201915b505050505081565b60408051600180825281830190925260609160009190816020015b60608152602001906001900390816101bb579050509050600080546101df90611214565b80601f016020809104026020016040519081016040528092919081815260200182805461020b90611214565b80156102585780601f1061022d57610100808354040283529160200191610258565b820191906000526020600020905b81548152906001019060200180831161023b57829003601f168201915b50505050508160008151811061027057610270611264565b6020026020010181905250308187876010604051602401610293939291906112a3565b60408051601f19818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f31b137b90000000000000000000000000000000000000000000000000000000017905290517fb4a858010000000000000000000000000000000000000000000000000000000091610322918c918c918c918c91016112cb565b60408051601f19818403018152908290527f556f183000000000000000000000000000000000000000000000000000000000825261036695949392916004016112fd565b60405180910390fd5b606060008061038084860186611499565b90925090506000610393878901896114fd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bdf95fef836040518263ffffffff1660e01b81526004016103e3919061161b565b600060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042891908101906116e5565b5090506000610437828261072c565b90505b8051516020820151101561070857600061045c82600001518360200151610793565b905061046881876107ae565b158061047d5750606082015161ffff16600114155b806104915750604082015161ffff16601014155b1561049c57506106fa565b6000806104b684600001518560a001518660c001516107d3565b90925090506001600160a01b038216156106f6576040516301ffc9a760e01b815263477cc53f60e11b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190611740565b156105c25760405163477cc53f60e11b81526001600160a01b03831690638ef98a7e9061056e908b908b908690600401611762565b600060405180830381865afa15801561058b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105b3919081019061179b565b98505050505050505050610724565b6040516301ffc9a760e01b8152639061b92360e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa15801561060d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106319190611740565b1561066457604051639061b92360e01b81526001600160a01b03831690639061b9239061056e908b908b906004016117d0565b600080836001600160a01b03168960405161067f91906117f5565b600060405180830381855afa9150503d80600081146106ba576040519150601f19603f3d011682016040523d82523d6000602084013e6106bf565b606091505b509150915081156106db57995061072498505050505050505050565b896040516314d3b60360e11b8152600401610366919061114c565b5050505b61070381610922565b61043a565b50836040516314d3b60360e11b8152600401610366919061114c565b949350505050565b61077a6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c0810182905261078d81610922565b92915050565b606060006107a18484610a0a565b9050610724848483610a64565b6000815183511480156107cc57506107cc8360008460008751610ae6565b9392505050565b6000606060006107e4868686610b09565b905060058151108061083957506040805180820190915260058082527f454e5331200000000000000000000000000000000000000000000000000000006020830152610837918391600091908290610ae6565b155b1561085757505060408051602081019091526000808252915061091a565b6000610894600580845161086b9190611827565b8491907f2000000000000000000000000000000000000000000000000000000000000000610b53565b905081518111156108cb5760006108ae8360058551610bef565b604080516020810190915260008152909550935061091a92505050565b60006108d983600584610bef565b90508061090b6108ea84600161183a565b60018587516108f99190611827565b6109039190611827565b869190610a64565b9450945050505061091a565b50505b935093915050565b60c081015160208201819052815151116109395750565b600061094d82600001518360200151610a0a565b826020015161095c919061183a565b825190915061096b9082610cf9565b61ffff16604083015261097f60028261183a565b825190915061098e9082610cf9565b61ffff1660608301526109a260028261183a565b82519091506109b19082610d21565b63ffffffff1660808301526109c760048261183a565b82519091506000906109d99083610cf9565b61ffff1690506109ea60028361183a565b60a0840181905291506109fd818361183a565b60c0909301929092525050565b6000815b83518110610a1e57610a1e61184d565b6000610a2a8583610d4b565b60ff169050610a3a81600161183a565b610a44908361183a565b915080600003610a545750610a5a565b50610a0e565b6107248382611827565b8251606090610a73838561183a565b1115610a7e57600080fd5b60008267ffffffffffffffff811115610a9957610a9961124e565b6040519080825280601f01601f191660200182016040528015610ac3576020820181803683370190505b50905060208082019086860101610adb828287610d6f565b509095945050505050565b6000610af3848484610dc5565b610afe878785610dc5565b149695505050505050565b60606000610b178585610d4b565b60ff16905082610b27828661183a565b10610b3457610b3461184d565b610b4a610b4285600161183a565b869083610a64565b95945050505050565b6000835b610b61848661183a565b811015610be257827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916868281518110610b9d57610b9d611264565b01602001517fff000000000000000000000000000000000000000000000000000000000000001603610bd0579050610724565b80610bda81611863565b915050610b57565b5060001995945050505050565b6000838381518110610c0357610c03611264565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f3000000000000000000000000000000000000000000000000000000000000000148015610cbb575083610c6084600161183a565b81518110610c7057610c70611264565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f7800000000000000000000000000000000000000000000000000000000000000145b15610cee57600080610cd9610cd186600261183a565b879086610de9565b915091508015610ceb575090506107cc565b50505b610724848484610e25565b8151600090610d0983600261183a565b1115610d1457600080fd5b50016002015161ffff1690565b8151600090610d3183600461183a565b1115610d3c57600080fd5b50016004015163ffffffff1690565b6000828281518110610d5f57610d5f611264565b016020015160f81c905092915050565b60208110610da75781518352610d8660208461183a565b9250610d9360208361183a565b9150610da0602082611827565b9050610d6f565b905182516020929092036101000a6000190180199091169116179052565b8251600090610dd4838561183a565b1115610ddf57600080fd5b5091016020012090565b6000806028610df88585611827565b1015610e095750600090508061091a565b600080610e17878787610f82565b909890975095505050505050565b600080610e33858585611049565b6040517f0178b8bf000000000000000000000000000000000000000000000000000000008152600481018290529091506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630178b8bf90602401602060405180830381865afa158015610eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edb9190611894565b90506001600160a01b038116610ef6576000925050506107cc565b6040517f3b3b57de000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03821690633b3b57de90602401602060405180830381865afa158015610f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f789190611894565b9695505050505050565b8251600090600190831115610f9657600080fd5b610fe7565b6000603a8210602f83111615610fb35750602f190190565b60478210604083111615610fc957506036190190565b60678210606083111615610fdf57506056190190565b5060ff919050565b60208501845b84811015610917576110048183015160001a610f9b565b6110166001830184015160001a610f9b565b60ff811460ff8314171561102f57600094505050610917565b60049190911b1760089490941b9390931792600201610fed565b6000806110868485875161105d9190611827565b8791907f2e00000000000000000000000000000000000000000000000000000000000000610b53565b90506000838210156110ae576110a7866110a184600161183a565b86611049565b90506110b2565b8391505b806110c9866110c18186611827565b899190610dc5565b60408051602081019390935282015260600160405160208183030381529060405280519060200120925050509392505050565b60005b838110156111175781810151838201526020016110ff565b50506000910152565b600081518084526111388160208601602086016110fc565b601f01601f19169290920160200192915050565b6020815260006107cc6020830184611120565b60008083601f84011261117157600080fd5b50813567ffffffffffffffff81111561118957600080fd5b6020830191508360208285010111156111a157600080fd5b9250929050565b600080600080604085870312156111be57600080fd5b843567ffffffffffffffff808211156111d657600080fd5b6111e28883890161115f565b909650945060208701359150808211156111fb57600080fd5b506112088782880161115f565b95989497509550505050565b600181811c9082168061122857607f821691505b60208210810361124857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006112b760408301858761127a565b905061ffff83166020830152949350505050565b6040815260006112df60408301868861127a565b82810360208401526112f281858761127a565b979650505050505050565b600060a082016001600160a01b0388168352602060a08185015281885180845260c08601915060c08160051b8701019350828a0160005b828110156113625760bf19888703018452611350868351611120565b95509284019290840190600101611334565b505050505082810360408401526113798187611120565b7fffffffff0000000000000000000000000000000000000000000000000000000086166060850152905082810360808401526113b58185611120565b98975050505050505050565b6040805190810167ffffffffffffffff811182821017156113e4576113e461124e565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156114135761141361124e565b604052919050565b600067ffffffffffffffff8211156114355761143561124e565b50601f01601f191660200190565b600082601f83011261145457600080fd5b81356114676114628261141b565b6113ea565b81815284602083860101111561147c57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156114ac57600080fd5b823567ffffffffffffffff808211156114c457600080fd5b6114d086838701611443565b935060208501359150808211156114e657600080fd5b506114f385828601611443565b9150509250929050565b6000602080838503121561151057600080fd5b823567ffffffffffffffff8082111561152857600080fd5b818501915085601f83011261153c57600080fd5b81358181111561154e5761154e61124e565b8060051b61155d8582016113ea565b918252838101850191858101908984111561157757600080fd5b86860192505b8383101561160e578235858111156115955760008081fd5b86016040818c03601f19018113156115ad5760008081fd5b6115b56113c1565b89830135888111156115c75760008081fd5b6115d58e8c83870101611443565b8252509082013590878211156115eb5760008081fd5b6115f98d8b84860101611443565b818b015284525050918601919086019061157d565b9998505050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561169257888303603f190185528151805187855261166688860182611120565b91890151858303868b015291905061167e8183611120565b968901969450505090860190600101611642565b509098975050505050505050565b600082601f8301126116b157600080fd5b81516116bf6114628261141b565b8181528460208386010111156116d457600080fd5b6107248260208301602087016110fc565b600080604083850312156116f857600080fd5b825167ffffffffffffffff81111561170f57600080fd5b61171b858286016116a0565b925050602083015163ffffffff8116811461173557600080fd5b809150509250929050565b60006020828403121561175257600080fd5b815180151581146107cc57600080fd5b6060815260006117756060830186611120565b82810360208401526117878186611120565b90508281036040840152610f788185611120565b6000602082840312156117ad57600080fd5b815167ffffffffffffffff8111156117c457600080fd5b610724848285016116a0565b6040815260006117e36040830185611120565b8281036020840152610b4a8185611120565b600082516118078184602087016110fc565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561078d5761078d611811565b8082018082111561078d5761078d611811565b634e487b7160e01b600052600160045260246000fd5b60006001820161187557611875611811565b5060010190565b6001600160a01b038116811461189157600080fd5b50565b6000602082840312156118a657600080fd5b81516107cc8161187c56fea2646970667358221220d404c16ec670c2b6592100de5c4c0099897d0cb617905f5afce8339d1c2991ad64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4867,
        "contract": "contracts/dnsregistrar/OffchainDNSResolver.sol:OffchainDNSResolver",
        "label": "gatewayURL",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}