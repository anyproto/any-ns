syntax = "proto3";
option go_package = "pb/anyns_api_server";

message NameAvailableRequest {
  // Name including .any suffix
  string fullName = 1;
}

message NameAvailableResponse {
  bool available = 1;
  
  // An Ethereum address that owns that name
  // This field is present only if name is "not available for registration" (free)
  string owner = 2;

  // A content hash attached to this name
  // This field is present only if name is "not available for registration" (free)
  string contentHash = 3;

  // A SpaceID attached to this name
  // This field is present only if name is "not available for registration" (free)
  string spaceId = 4;
}

message NameRegisterRequest {
  string fullName = 1;

  // A content hash attached to this name
  string ownerAnyAddress = 2;
  
  // An Ethereum address that owns that name
  string ownerEthAddress = 3;

  // A SpaceID attached to this name
  optional string spaceId = 4;
}

message NameRegisterRequestSigned {
  bytes payload = 1;    // NameRegisterRequest struct
  bytes signature = 2;  // payload signed by payload.ownerEthAddress 
}

message NameUpdateRequest {
  string fullName = 1;

  // A content hash attached to this name
  string contentHash = 2;

  // A SpaceID attached to this name
  string spaceId = 3;
}

message GetOperationStatusRequest {
  uint32 operationId = 1;
}

enum OperationState {
  Pending = 0;
  Completed = 1;
  Error = 2;
}

message OperationResponse {
  uint32 operationId = 1;

  OperationState operationState = 2;
}

message GetNameRegisterMsgResponse {
  bytes msg = 1;
}

// Add to queue a name registration operation
// results in async operation
service Anyns {
  // Check if name is free or get the attached information if not
  rpc IsNameAvailable(NameAvailableRequest) returns (NameAvailableResponse) {}

  // TODO: use NameRegisterRequestSigned
  rpc NameRegister(NameRegisterRequest) returns (OperationResponse) {}

  // Add to queue a name update operation
  // results in async operation
  rpc NameUpdate(NameUpdateRequest) returns (OperationResponse) {}

  // Get the async operation with id==X statue
  rpc GetOperationStatus(GetOperationStatusRequest) returns (OperationResponse) {}

// v2:
  //rpc RenewName(NameRegisterRequest) returns (OperationResponse) {}

  // ??? reverse resolver
  // rpc GetNameByAddress()
}
